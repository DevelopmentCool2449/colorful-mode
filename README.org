#+title: [[./assets/colorful-mode-logo.svg]]
#+subtitle: Preview any color in your buffer in real time.
#+author: Elias G.B. Perez
#+language: en
#+export_file_name: colorful-mode.texi
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: colorful-mode: (colorful-mode).
#+texinfo_dir_desc: Preview color hexs in your buffer

#+html: <img src="https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/elisp_logo_warning.svg" align="right" width="10%">

üü¢colorful-mode is a minor mode that allow you preview any color
format such as *color hex* and *color names*, in your current buffer
in real time and in a user friendly way based on üåà[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode.el]].

*WARNING: THIS PACKAGE STILL IN A EXPERIMENTAL STATE, ABRUPT CHANGES SUCH AS DELETE USER FUNCTIONS, OPTIONS AND KEYBINDINGS OR UNEXPECTED BREAKS ARE USUALLY COMMON*

* Features ‚ú®
- Preview emacs colors names, hexadecimal colors and CSS rgb functions
  in your current buffer in real time.
- Convert color to other formats or copy them without replace current
  color.
- Preview using highlight or a prefix/suffix string.
- Preview only colors in strings.
- Exclude colors such as hex values and color names.

* Screenshots and animated GIFs üì∑
[[./assets/gif1.gif]]
/With prefix instead highliht/.

[[./assets/gif2.gif]]
[[./assets/gif3.gif]]
[[./assets/screenshot1.png]]
[[./assets/screenshot2.png]]
[[./assets/screenshot3.png]]

[[./assets/screenshot4.png]]
/With a custom prefix (in this example a non-ASCII/Unicode character)/.

* User Options, Setups and Guides üìñ
** Customizable User options
- =colorful-allow-mouse-clicks (default: t)= If non-nil, allow using mouse buttons
  for change color.
- =colorful-use-prefix (default: nil)= If non-nil, use prefix for preview color
  instead highlight them.
  *NOTE: css-mode and css-ts-mode by default colorize rgb and hex colors, this may interfere with colorful prefix, you can disable this setting =css-fontify-colors= to nil*
- =colorful-prefix-string (default: "‚óè")= Prefix symbol to be used according
  =colorful-use-prefix=.
- =colorful-prefix-alignment (default: 'left)= The position to put prefix string.
  The value can be left or right.
- =colorful-extra-color-keyword-functions=
  default:
#+begin_src emacs-lisp
  '((emacs-lisp-mode . (colorful-add-color-names colorful-add-rgb-colors))
    ((css-mode css-ts-mode) . colorful-add-rgb-colors))
#+end_src
  List of functions to add extra color keywords to colorful-color-keywords.

  It can be a cons cell specifing the mode (or a list of modes)
  e.g:
#+begin_src emacs-lisp
  (((css-mode css-ts-mode) . colorful-add-rgb-colors)
    (emacs-lisp-mode . (colorful-add-color-names colorful-add-rgb-colors))
    ((text-mode html-mode) . (colorful-add-color-names
                              colorful-add-rgb-colors))
    ...)
#+end_src
  Or a simple list of functions for executing wherever colorful is active:
  (colorful-add-color-names
    colorful-add-rgb-colors)

  Available functions are:
   - colorful-add-color-names.
   - colorful-add-rgb-colors.

- =colorful-exclude-colors (default: '("#def"))= List of keyword to don't highlight.
- =colorful-short-hex-convertions (default: t)= If non nil, hex
  values converted by coloful should be as short as possible.
  Setting this to t will make hex values follow a 24-bit specification
  and can make them inaccurate.
- =colorful-only-strings (default: nil)= If non-nil colorful will only
  highlight colors inside strings.
- =global-colorful-modes (default: '(mhtml-mode html-ts-mode css-mode css-ts-mode emacs-lisp-mode))= Which major modes global-colorful-mode is switched on in (globally).

** Interactive User Functions.
- =colorful-change-or-copy-color= Change or copy color to a converted
  format at current cursor position.
- =colorful-convert-and-change-color= Convert color to a valid format
  and replace color at current cursor position.
- =colorful-convert-and-copy-color= Convert color to a valid format
  and copy it at current cursor position.
- =colorful-mode= Buffer-local minor mode.
- =global-colorful-mode= Global minor mode.

** Key bindings
These key bindings are defined by: =colorful-mode-map=
- =C-c c c= ‚Üí =colorful-change-or-copy-color=.
- =C-c c k= ‚Üí =colorful-convert-and-copy-color=.
- =C-c c r= ‚Üí =colorful-convert-and-change-color=.

** Adding extra colors
Colorful by default provides extra functions that highlight additional
colors:

- =colorful-add-color-names= Add emacs color names to colorful-color-keywords.
- =colorful-add-rgb-colors= Add CSS rgb color to colorful-color-keywords.

For use them add it to:
#+begin_src emacs-lisp
;; In this example add emacs color names to colorful-keywords.
(add-to-list 'colorful-extra-color-keyword-functions #'colorful-add-color-names)
#+end_src

See: =colorful-extra-color-keyword-functions= for more details.

* Installation üì¶
It's recommended that you must use emacs-28.X or higher.

Currently colorful-mode is not available in any elisp package archive,
however you can install it with =package-vc-install= in emacs-29.X

Run =M-x package-vc-install=
And type =https://github.com/DevelopmentCool2449/colorful-mode.git=

For emacs 30 users you can use =use-package= macro with =:vc= keyword:

#+begin_src emacs-lisp
  (use-package colorful-mode
    :vc (:url "https://github.com/DevelopmentCool2449/colorful-mode.git"
              :rev :newest)
    ...)
#+end_src

* How does it compare to =rainbow-mode=?
=colorful-mode= improves =rainbow-mode= in adding more features
and fixing some /(and old)/ bugs:

| Comparation                                             | colorful-mode.el | rainbow-mode.el |
|---------------------------------------------------------+------------------+-----------------|
| Compatible with hl-line and other overlays?             | ‚úì                | ‚ùå              |
| Convert color to other formats?                         | ‚úì                | ‚ùå              |
| Insert open color hex                                   | Work in progress | ‚ùå              |
| Opcionally use string preffix/suffix instead highlight  | ‚úì                | ‚ùå              |
| Use emacs built-in functions instead define custom ones | ‚úì^{1}            | ‚úì^{2}           |
| Exclude keywords/colors to highlight                    | ‚úì                | ‚ùå^{3}          |
| Highlight only in strings and docstrings                | ‚úì                | ‚ùå              |
| Allow highlight some colors only in specific modes      | ‚úì                | ‚ùå              |
| No performance issues?^{4}                              | ‚ùå               | ‚úì               |

1. However colorful defines some helper funtions for some cases and
   avoiding extra computation.
2. Only for some cases.
3. rainbow-mode (like colorful) uses regex for highlight some
   keywords, however it cannot exclude specifics colors keywords
   (such as "#def" that overrides C "#define" keyword).
4. I didn't a benchmark however due colorful-mode uses overlays
   instead text properties (like rainbow-mode) it can be a bit slow.

The intention is to provide a featured alternative to
=rainbow-mode.el= with a user-friendy approach

If you prefer only highlights without color convertion or
preffix/suffix you can use =rainbow-mode.el=.

On the other hand, if you want convert colors, overlays and
optional prefix strings you can use =colorful-mode.el=.

* Plans for future
Currently this repo will only be used for feature-request /(i can't
promise to do them)/, send bug reports, and feedback /(i would greatly
appreciate this since i'm not expert in elisp)/.

Due I have plans for submit it to *GNU ELPA* /(and maybe MELPA)/ *Pull
Resquest will not be accepted* (unless your contribution is less than
15 lines [see: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html][Copyright Assignment]]] and this package is ready for
submit to ELPA and you are willing to assign copyright to FSF)

Also i will try to make this package as stable as possible before
submit it to ELPA, later that *I won't be able to be the mantainer* of
this package, However I would like if someone would be able to be the
mantainer (if you are interested please email me
<eg642616@gmail.com>).

#+html: <img src="https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/powered_by_emacs.svg" align="right" width="10%">
#+html: <img src="https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/powered_by_org_mode.svg" align="right" width="10%">
